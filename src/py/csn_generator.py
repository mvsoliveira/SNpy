cfg_fmt = '(a => {a:<2}, b => {b:<2}, p => {p:s}, o => False, r => False)'
stage_fmt = '({stage:s})'
net_fmt = 'when {i:d} => return (\n{net:s}\n);'

def in_list(list_of_lists, item):
    for list_ in list_of_lists:
        if item in list_:
            return True
    return False

def find_missing(s,I):
    values = range(1, I + 1, 1)
    missing = []
    for v in values:
        if not in_list(s, v):
            missing.append(v)
    return missing

def find_missing_pairs(stages,I):
    s = find_missing(stages,I)
    pairs = []
    while s:
        pairs.append([s.pop(0),s.pop()])
    return pairs


nets = []

# I = 4
nets.append([
    [[1,2], [3,4]],
    [[1,3],[2,4]],
    [[2,3]]
])

# I = 8
nets.append([
    [[1, 2], [3, 4], [5, 6], [7, 8]],
    [[1, 3], [2, 4], [5,7], [6,8]],
    [[2, 3], [6,7]],
    [[1,5], [2,6], [3,7], [4,8]],
    [[3,5], [4,6]],
    [[2,3], [4,5], [6,7]]
])

# I = 16
nets.append([
    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]],
    [[1, 3], [2, 4], [5,7], [6,8], [9, 11], [10, 12], [13,15], [14,16]],
    [[1,5], [2,6], [3,7], [4,8], [9,13], [10,14], [11,15], [12,16]],
    [[1,9],[2,10],[3,11],[4,12],[5,13],[6,14],[7,15],[8,16]],
    [[2,3],[4,13],[14,15],[8,12],[5,9],[6,11],[7,10]],
    [[2,5],[3,9],[4,11],[6,10],[7,13],[8,14],[12,15]],
    [[3,5], [4,6], [7,9], [8,10], [11,13], [12,14]],
    [[4,7], [6,9], [8,11], [10,13]],
    [[4,5],[6,7],[8,9],[10,11],[12,13]]
])

# I = 22
#nets.append([
# [[0,1], [2,3], [4,5], [6,7], [8,9], [10,11], [12,13], [14,15], [16,17], [18,19], [20,21]], 
# [[2,4], [1,3], [0,5], [6,8], [7,9],[10,12], [11,13], [14,16], [15,17], [18,20], [19,21]],
# [[6,10], [7,11], [8,12], [9,13], [14,18], [15,19], [16,20], [17,21], [3,5], [1,4], [0,2]],
# [[9,17], [7,15], [11,19], [8,16], [3,12], [0,10], [1,18], [5,20], [13,21], [6,14], [2,4]],
# [[0,7], [17,20], [3,15], [9,18], [2,11], [4,16], [5,10], [1,8], [12,19], [13,14]],
# [[20,21], [0,6], [3,8], [12,18], [2,13], [14,16], [5,9], [10,15], [4,7], [11,17]],
# [[16,20], [18,19], [15,17], [12,14], [10,11], [7,9], [8,13], [4,5], [1,3], [2,6]],
# [[19,20], [16,17], [15,18],  [11,14], [9,13], [10,12], [7,8], [3,5], [4,6], [1,2]],
# [[18,19], [14,16], [13,15],[11,12], [8,9], [5,10], [6,7], [2,3]],
# [[17,19], [16,18], [14,15], [12,13], [9,11], [8,10], [5,7], [3,6], [2,4]],
# [[17,18], [15,16], [13,14], [11,12], [9,10], [7,8], [5,6], [3,4]],
# [[16,17], [14,15], [12,13], [10,11], [8,9], [6,7], [4,5]]
# ])
 
nets.append([
 [[1+0,1+1], [1+2,1+3], [1+4,1+5], [1+6,1+7], [1+8,1+9], [1+10,1+11], [1+12,1+13], [1+14,1+15], [1+16,1+17], [1+18,1+19], [1+20,1+21]], 
 [[1+2,1+4], [1+1,1+3], [1+0,1+5], [1+6,1+8], [1+7,1+9],[1+10,1+12], [1+11,1+13], [1+14,1+16], [1+15,1+17], [1+18,1+20], [1+19,1+21]],
 [[1+6,1+10], [1+7,1+11], [1+8,1+12], [1+9,1+13], [1+14,1+18], [1+15,1+19], [1+16,1+20], [1+17,1+21], [1+3,1+5], [1+1,1+4], [1+0,1+2]],
 [[1+9,1+17], [1+7,1+15], [1+11,1+19], [1+8,1+16], [1+3,1+12], [1+0,1+10], [1+1,1+18], [1+5,1+20], [1+13,1+21], [1+6,1+14], [1+2,1+4]],
 [[1+0,1+7], [1+17,1+20], [1+3,1+15], [1+9,1+18], [1+2,1+11], [1+4,1+16], [1+5,1+10], [1+1,1+8], [1+12,1+19], [1+13,1+14]],
 [[1+20,1+21], [1+0,1+6], [1+3,1+8], [1+12,1+18], [1+2,1+13], [1+14,1+16], [1+5,1+9], [1+10,1+15], [1+4,1+7], [1+11,1+17]],
 [[1+16,1+20], [1+18,1+19], [1+15,1+17], [1+12,1+14], [1+10,1+11], [1+7,1+9], [1+8,1+13], [1+4,1+5], [1+1,1+3], [1+2,1+6]],
 [[1+19,1+20], [1+16,1+17], [1+15,1+18],  [1+11,1+14], [1+9,1+13], [1+10,1+12], [1+7,1+8], [1+3,1+5], [1+4,1+6], [1+1,1+2]],
 [[1+18,1+19], [1+14,1+16], [1+13,1+15],[1+11,1+12], [1+8,1+9], [1+5,1+10], [1+6,1+7], [1+2,1+3]],
 [[1+17,1+19], [1+16,1+18], [1+14,1+15], [1+12,1+13], [1+9,1+11], [1+8,1+10], [1+5,1+7], [1+3,1+6], [1+2,1+4]],
 [[1+17,1+18], [1+15,1+16], [1+13,1+14], [1+11,1+12], [1+9,1+10], [1+7,1+8], [1+5,1+6], [1+3,1+4]],
 [[1+16,1+17], [1+14,1+15], [1+12,1+13], [1+10,1+11], [1+8,1+9], [1+6,1+7], [1+4,1+5]]
])

i = 0
I = [4,8,16,22] 
for net in nets:
    cfg_stage_str = []
    for stage in net:
        cfg_stage = [cfg_fmt.format(a=str(p[0]-1),b=str(p[1]-1),p='False') for p in stage]
        missing = find_missing_pairs(stage,I[i])
        cfg_stage += [cfg_fmt.format(a=str(p[0]-1), b=str(p[1]-1), p='True ') for p in missing]
        #print find_missing_pairs(stage,I[i])
        cfg_stage_str.append(stage_fmt.format(stage=', '.join(cfg_stage)))

    print net_fmt.format(i=I[i], net=',\n'.join(cfg_stage_str))
    i += 1
#net = net_fmt.format(net=cfg_stage_str)
#print net




